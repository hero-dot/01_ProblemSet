getwd()
assemblies <- read.csv(assemblies.csv, header = T)
getwd()
assemblies <- read.csv("assemblies.csv", header = T)
carMileage <- read.csv("carMileage.csv",header = T)
str(assemblies)
cars <- mtcars
str(cars)
unique(cars)
head(cars)
cars[1,1]
cars[1,]
cars <- mtcars
cars[1:10,]
cars[10:20,]
cars[1,]
cars[2,]
assemblies <- read.csv2("assemblies.csv", head=T)
str(assemblies)
carPrices <- read.csv("carPrices.csv", head = T)
head(carPrices)
carPrices <- read.csv("carPrices.csv", header = T)
carMileage <- read.csv("carMileage.csv", header = T)
head(carMileage)
components <- read.csv("components.csv", header = T)
head(components)
carPrices <- read.csv("carPrices.csv", header = T)
head(carPrices)
carMileage <- read.csv("carMileage.csv", header = T)
vehicleData <- data.frame(carPrices, carMileage$Mileage)
vehicleData
vehicleData <- merge(carPrices, carMileage, by=c("Type"))
vehicleData(head)
vehicleData <- merge(carPrices, carMileage, by=c("Type"))
vehicleData(head)
vehicleData
str(vehicleData)
duplicated(vehicleData)
mtcars
dim(mtcars)
str(mtcars)
vehicleData <- mtcars
createAd <- function(vehicleData){return(vehicleData[20,])}
createAd(vehicleData)
str(vehicleData)
row.names(vehicleData)
sprintf("* %s*/N *Horsepower:%i*/N",row.names(vehicleData[20,]),vehicleData[20,4])
sprintf("* %s*\N *Horsepower:%i*\N",row.names(vehicleData[20,]),vehicleData[20,4])
sprintf("* %s*",row.names(vehicleData[20,]))
sprintf("* Horsepower:%i*",vehicleData[20,4])
createFormattedAd <- function(vehicleData){
sprintf("* %s*",row.names(vehicleData[20,]))
sprintf("* Horsepower:%i*",vehicleData[20,4])
}
createFormattedAd(vehicleDate)
createFormattedAd(vehicleData)
createFormattedAd(vehicleDate)
sprintf("* %s*",row.names(vehicleData[20,]))
sprintf(* %s*,row.names(vehicleData[20,]))
vehicleData[1,]
vehicleData[1,0]
vehicleData[1,1]
vehicleData[1,2]
str(vehicleData)
createFormattedAd(vehicleData)
sprintf("* %s*",vehicleData[20,])
sprintf("* %s*",row.names(vehicleData[20,]))
createFormattedAd(vehicleData,"Toyota Corolla")
createFormattedAd <- function(vehicleData,carname){
sprintf("* %s*",row.names(vehicleData[carname,]))
sprintf("* Horsepower:%i*",vehicleData[carname,4])
}
createFormattedAd(vehicleData,"Toyota Corolla")
paste(vehicleData[20,])
length(vehicleData[20,])
length(vehicleData[20,2])
createFormattedAd <- function(vehicleData,carname){
message(sprintf("* %s*",row.names(vehicleData[carname,]))
sprintf("* Horsepower: %i*",vehicleData[carname,4]))
}
createFormattedAd <- function(vehicleData){message(sprintf("*%s* *%s* *%s* *%s *%s* *%s* *%s* *%s* *%s* *%s* *%s*", paste(vehicleData[20,])))}
createFormattedAd(vehicleData)
length(vehicleData[20,])
length(paste(vehicleData[20,]))
vehicleData[20,]
sprintf(vehicleData[20,])
sprintf(paste(vehicleData[20,]))
message(sprintf(paste(vehicleData[20,])))
message(sprintf("%s",paste(vehicleData[20,])))
sprintf("%s",paste(vehicleData[20,]))
sprintf("%s %s %s %s %s %s %s %s %s %s %s ",paste(vehicleData[20,]))
sprintf("%s %s %s %s %s %s %s %s %s %s ",paste(vehicleData[20,]))
sprintf("%s %s %s %s %s %s %s %s %s ",paste(vehicleData[20,]))
sprintf("%s %s %s %s %s %s %s %s ",paste(vehicleData[20,]))
sprintf("%s",paste(vehicleData[20,]))
vehicleData[vehicleData[1,]]
vehicleData[,1]
vehicleData[]
message(vehicleData[20,])
pasted_object <- paste(vehicleData[20,])
createAd(vehicleData)
sprintf("hello%s",paste(vehicleData[20,]))
message(sprintf("hello%s",paste(vehicleData[20,])))
message(sprintf("hello%s",vehicleData[20,]))
message(sprintf("hello%s",vehicleData[20,1]))
message(sprintf("hello %s",vehicleData[20,1])sprintf("hello%s",vehicleData[20,2]))
message(sprintf("hello %s",vehicleData[20,1]) sprintf("hello%s",vehicleData[20,2]))
message(sprintf("hello %s",vehicleData[20,1]), sprintf("hello%s",vehicleData[20,2]))
message(sprintf("hello %s",vehicleData[20,1])\N, sprintf("hello%s",vehicleData[20,2]))
message(sprintf("hello %s",vehicleData[20,1])/N, sprintf("hello%s",vehicleData[20,2]))
message(sprintf("hello %s/N",vehicleData[20,1]),
message(sprintf("hello %s\N",vehicleData[20,1]),
library(dyplr)
library(dplyr)
browseVignettes(package = "dplyr")
message(sprintf("hello %s\N",vehicleData[20,1]),
message(sprintf("hello %s",vehicleData[20,1]),
sprintf("hello %s",vehicleData[20,2]))
message(sprintf("hello %s ",vehicleData[20,1]),
sprintf("hello %s ",vehicleData[20,2]))
sprintf("hello %s ",vehicleData[20,]))
message(sprintf("hello %s ",vehicleData[20,1]),
sprintf("hello %s ",vehicleData[20,]))
message(sprintf("hello %s ",row.names(vehicleData[20,])),
sprintf("hello %s ",vehicleData[20,]))
sprintf("hello %s ",vehicleData[20,1]))
message(sprintf(" %s ",row.names(vehicleData[20,])),
sprintf("hello %s ",vehicleData[20,1]))
message(sprintf(" %s \n",row.names(vehicleData[20,])),
message(sprintf(" %s \n",row.names(vehicleData[20,])),
sprintf("hello %s ",vehicleData[20,1]))
message(sprintf(" %s \n",row.names(vehicleData[20,])),
sprintf("hello %s ",vehicleData[20,1]))
message(sprintf(" %s \n",row.names(vehicleData[20,])),
sprintf("hello %s ",vehicleData[20,1]))
message(sprintf(" %s \n hello %s",row.names(vehicleData[20,]), vehicleData[20,1]))
message(sprintf("*%s* \n *hello %s*",row.names(vehicleData[20,]), vehicleData[20,1]))
sprintf("*%s* \n *hello %s*",row.names(vehicleData[20,]), vehicleData[20,1])
sprintf("*%s* \n *hello %s*",c(row.names(vehicleData[20,]), paste(vehicleData[20,])))
v <- c(row.names(vehicleData[20,]), paste(vehicleData[20,])
)row.names(vehicleData)
v <- c(row.names(vehicleData[20,]), paste(vehicleData[20,]))
v
sprintf("*%s* \n *hello %s*%s %s %s %s %s %s %s %s %s %s ",c(row.names(vehicleData[20,]), paste(vehicleData[20,])))
sprintf("%s is %f feet tall\n", "Sven", 7.1)      # OK
try(sprintf("%s is %i feet tall\n", "Sven", 7.1)) # not OK
sprintf("%s is %i feet tall\n", "Sven", 7  )  # OK
## use a literal % :
sprintf("%.0f%% said yes (out of a sample of size %.0f)", 66.666, 3)
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%05.1f", pi)
sprintf("%+f", pi)
sprintf("% f", pi)
sprintf("%-10f", pi) # left justified
sprintf("%e", pi)
sprintf("%E", pi)
sprintf("%g", pi)
sprintf("%g",   1e6 * pi) # -> exponential
sprintf("%.9g", 1e6 * pi) # -> "fixed"
sprintf("%G", 1e-6 * pi)
sprintf("%1.f", 101)
xx <- sprintf("%1$d %1$x %1$X", 0:15)
xx <- matrix(xx, dimnames = list(rep("", 16), "%d%x%X"))
noquote(format(xx, justify = "right"))
sprintf("min 10-char string '%10s'",
c("a", "ABC", "and an even longer one"))
sprintf("%09s", month.name)
View(xx)
vehicleData <- mtcars
createAd <- function(vehicleData){return(vehicleData[20,])}
createAd <- function(vehicleData, carname){return(vehicleData[carname,])}
createAd(vehicleData,"Toyota Corolla")
values <- c(1,2,3)
sprintf("%i and %i is %i",values)
sprintf("%i and %i is %i",values[1])
sprintf("%i and %i is %i",values[1],values[2],values[3])
sprintf("%i and %i is %i",paste(values))
sprintf("%s and %s is %s",paste(values))
sprintf("%i and",values)
sprintf("%i", row.names(vehicleData[20,]))
sprintf("%s", row.names(vehicleData[20,]))
sprintf("%s \n", row.names(vehicleData[20,]))
message(sprintf("-*********************"),
sprintf("%s \n", row.names(vehicleData[20,])),
sprintf("%s \n", row.names(vehicleData[20,1])),
sprintf("%s \n", row.names(vehicleData[20,2])),
sprintf("%s \n", row.names(vehicleData[20,3])),
sprintf("%s \n", row.names(vehicleData[20,4])),
sprintf("%s \n", row.names(vehicleData[20,5])),
sprintf("%s \n", row.names(vehicleData[20,6])),
sprintf("%s \n", row.names(vehicleData[20,7])),
sprintf("%s \n", row.names(vehicleData[20,8])),
sprintf("%s \n", row.names(vehicleData[20,9])),
sprintf("%s \n", row.names(vehicleData[20,10])),
sprintf("%s \n", row.names(vehicleData[20,11]))
)
message(sprintf("*********************\n"),
sprintf("%f \n", row.names(vehicleData[20,])),
sprintf("%f \n", row.names(vehicleData[20,1])),
sprintf("%f \n", row.names(vehicleData[20,2])),
sprintf("%f \n", row.names(vehicleData[20,3])),
sprintf("%f \n", row.names(vehicleData[20,4])),
sprintf("%f \n", row.names(vehicleData[20,5])),
sprintf("%f \n", row.names(vehicleData[20,6])),
sprintf("%f \n", row.names(vehicleData[20,7])),
sprintf("%f \n", row.names(vehicleData[20,8])),
sprintf("%f \n", row.names(vehicleData[20,9])),
sprintf("%f \n", row.names(vehicleData[20,10])),
sprintf("%f \n", row.names(vehicleData[20,11]))
)
message(sprintf("*********************\n"),
sprintf("%f \n", row.names(vehicleData[20,])),
sprintf("%f \n", (vehicleData[20,1])),
sprintf("%f \n", (vehicleData[20,2])),
sprintf("%f \n", (vehicleData[20,3])),
sprintf("%f \n", (vehicleData[20,4])),
sprintf("%f \n", (vehicleData[20,5])),
sprintf("%f \n", (vehicleData[20,6])),
sprintf("%f \n", (vehicleData[20,7])),
sprintf("%f \n", (vehicleData[20,8])),
sprintf("%f \n", (vehicleData[20,9])),
sprintf("%f \n", (vehicleData[20,10])),
sprintf("%f \n", (vehicleData[20,11]))
)
message(sprintf("*********************\n"),
sprintf("%s \n", row.names(vehicleData[20,])),
sprintf("%f \n", (vehicleData[20,1])),
sprintf("%f \n", (vehicleData[20,2])),
sprintf("%f \n", (vehicleData[20,3])),
sprintf("%f \n", (vehicleData[20,4])),
sprintf("%f \n", (vehicleData[20,5])),
sprintf("%f \n", (vehicleData[20,6])),
sprintf("%f \n", (vehicleData[20,7])),
sprintf("%f \n", (vehicleData[20,8])),
sprintf("%f \n", (vehicleData[20,9])),
sprintf("%f \n", (vehicleData[20,10])),
sprintf("%f \n", (vehicleData[20,11]))
)
message(sprintf("*********************\n"),
sprintf("* %s \n", row.names(vehicleData[20,])),
sprintf("* %f \n", (vehicleData[20,1])),
sprintf("%f \n", (vehicleData[20,2])),
sprintf("%f \n", (vehicleData[20,3])),
sprintf("%f \n", (vehicleData[20,4])),
sprintf("%f \n", (vehicleData[20,5])),
sprintf("%f \n", (vehicleData[20,6])),
sprintf("%f \n", (vehicleData[20,7])),
sprintf("%f \n", (vehicleData[20,8])),
sprintf("%f \n", (vehicleData[20,9])),
sprintf("%f \n", (vehicleData[20,10])),
sprintf("%f \n", (vehicleData[20,11])),
sprintf("*********************\n")
)
message(sprintf("***************************\n"),
sprintf("* %s                      *\n", row.names(vehicleData[20,])),
sprintf("* Mileage per Gasage = %f *\n", (vehicleData[20,1])),
sprintf("* Cylinder = %f           *\n", (vehicleData[20,2])),
sprintf("* disp = %f               *\n", (vehicleData[20,3])),
sprintf("* Horsepower = %f         *\n", (vehicleData[20,4])),
sprintf("* drat = %f               *\n", (vehicleData[20,5])),
sprintf("* wt = %f                 *\n", (vehicleData[20,6])),
sprintf("* qsec = %f               *\n", (vehicleData[20,7])),
sprintf("* vs = %f                 *\n", (vehicleData[20,8])),
sprintf("* am = %f                 *\n", (vehicleData[20,9])),
sprintf("* gear = %f               *\n", (vehicleData[20,10])),
sprintf("* carb = %f               *\n", (vehicleData[20,11])),
sprintf("***************************\n")
)
message(sprintf("***************************\n"),
sprintf("* %s                     *\n", row.names(vehicleData[20,])),
sprintf("* Mileage per Gasage = %.3f*\n", (vehicleData[20,1])),
sprintf("* Cylinder = %.3f           *\n", (vehicleData[20,2])),
sprintf("* disp = %.3f               *\n", (vehicleData[20,3])),
sprintf("* Horsepower = %.3f         *\n", (vehicleData[20,4])),
sprintf("* drat = %f               *\n", (vehicleData[20,5])),
sprintf("* wt = %f                 *\n", (vehicleData[20,6])),
sprintf("* qsec = %f               *\n", (vehicleData[20,7])),
sprintf("* vs = %f                 *\n", (vehicleData[20,8])),
sprintf("* am = %f                 *\n", (vehicleData[20,9])),
sprintf("* gear = %f               *\n", (vehicleData[20,10])),
sprintf("* carb = %f               *\n", (vehicleData[20,11])),
sprintf("***************************\n")
)
message(sprintf("***************************\n"),
sprintf("* %s                     *\n", row.names(vehicleData[20,])),
sprintf("* Mileage per Gasage = %.1f*\n", (vehicleData[20,1])),
sprintf("* Cylinder = %.1f           *\n", (vehicleData[20,2])),
sprintf("* disp = %.1f               *\n", (vehicleData[20,3])),
sprintf("* Horsepower = %.1f         *\n", (vehicleData[20,4])),
sprintf("* drat = %.1f               *\n", (vehicleData[20,5])),
sprintf("* wt = %.1f                 *\n", (vehicleData[20,6])),
sprintf("* qsec = %.1f               *\n", (vehicleData[20,7])),
sprintf("* vs = %.1f                 *\n", (vehicleData[20,8])),
sprintf("* am = %.1f                 *\n", (vehicleData[20,9])),
sprintf("* gear = %.1f               *\n", (vehicleData[20,10])),
sprintf("* carb = %.1f               *\n", (vehicleData[20,11])),
sprintf("***************************\n")
)
c(paste(vehicleData[20,]))
sprintf("%f",c(paste(vehicleData[20,])))
sprintf("%s",c(paste(vehicleData[20,])))
sprintf("%s\n",c(paste(vehicleData[20,])))
message(sprintf("%s\n",c(paste(vehicleData[20,]))))
message(sprintf("%s %s\n",c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"),c(paste(vehicleData[20,]))))
message(sprintf("*%-5s =  %-3s\n",c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"),c(paste(vehicleData[20,]))))
message(sprintf("*%-5s =  %-3s*\n",c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"),c(paste(vehicleData[20,]))))
message(sprintf("*%-5s =  %-5s*\n",c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"),c(paste(vehicleData[20,]))))
topLine <- rep("*",15)
message(sprintf("%s",topLine)
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[20,]))))
message(sprintf("***************"),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[20,])))
)
vehicleDim <- c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")
message(sprintf("***************"),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[20,])))
)
message(sprintf("***************\n"),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[20,])))
)
message(sprintf("***************\n"),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[20,]))),
sprintf("***************\n"))
carname <- "Toyota Corolla"
message(sprintf("***************\n"),
sprintf("*-15s",carname),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("***************\n"))
message(sprintf("***************\n"),
sprintf("*%-15s\n",carname),
sprintf("*%-5s = %-5s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("***************\n"))
message(sprintf("*******************\n"),
sprintf("*%-19s*\n",carname),
sprintf("*%-5s = %-9s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("*******************\n"))
message(sprintf("*******************\n"),
sprintf("*%-17s*\n",carname),
sprintf("*%-5s = %-9s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("*******************\n"))
createFormattedAd(vehicleData,"Toyota Corolla")
createFormattedAd <- function(vehicleData,carname)
{message(sprintf("*******************\n"),
sprintf("*%-17s*\n",carname),
sprintf("*%-5s = %-9s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("*******************\n"))
}
createFormattedAd(vehicleData,"Toyota Corolla")
row.names(vehicleData)
createFormattedAd(vehicleData,"Chrysler Imperial")
createFormattedAd(vehicleData,"Pontiac Firebird")
quantile(vehicleData$hp)
createFormattedAd <- function(vehicleData,carname)
{vehicleDim <- c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")
message(sprintf("*******************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("*******************\n"))
}
createFormattedAd(vehicleData,"Pontiac Firebird")
createFormattedAd <- function(vehicleData,carname)
{vehicleDim <- c("mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb")
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(vehicleData[carname,]))),
sprintf("********************\n"))
}
createFormattedAd(vehicleData,"Pontiac Firebird")
