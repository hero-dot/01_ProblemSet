topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehiclesData)
if (vehiclesData[n,1] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehiclesData[n,4] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehiclesData[n,7] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(vehiclesData[n,c(1,2,4,7)])),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisonsN(vehiclesData,15)
createFormattedAdWithComparisonsN <- function(vehiclesData,n)
{
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehiclesData[n,])
if (vehiclesData[n,1] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehiclesData[n,4] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehiclesData[n,7] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(vehiclesData[n,c(1,2,4,7)])),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisonsN(vehiclesData,15)
createFormattedAdWithComparisonsN(vehiclesData,25)
createFormattedAdWithComparisonsN(vehiclesData,12)
vehiclesData[sample(nrow(vehiclesData),3)]
vehiclesData[sample(3,3)]
sample(nrows(vehiclesData),ncol(vehiclesData))
sample(nrow(vehiclesData),ncol(vehiclesData))
df[sample(nrow(vehiclesData),ncol(vehiclesData))]
vehiclesData[sample(nrow(vehiclesData),3),]
vehiclesData[sample(nrow(vehiclesData),3),]
sapply(list, function)
vehiclesData[sample(nrow(vehiclesData),15),]
vehiclesData[sample(nrow(vehiclesData),15),]
sapply(vehiclesData[sample(nrow(vehiclesData),15),], createFormattedAdWithComparisons)
randVehicles <- vehiclesData[sample(nrow(vehiclesData),n),]
randVehicles <- vehiclesData[sample(nrow(vehiclesData),3),]
randVehicles
slice(vehiclesData, sample(nrow(vehiclesData),3))
library(dplyr)
slice(vehiclesData, sample(nrow(vehiclesData),3))
vehiclesData[sample(nrow(vehiclesData),3),]
select(vehiclesData,mpg,hp,qsec)
vehicleData
select(vehicleData,mpg,hp,qsec)
library(dplyr)
sample_n(vehiclesData,10)
select(vehicleData,mpg,hp,qsec)
vehicleData[,c(1,2,4,7)]
createFormattedAd <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,hp,qsec)))),
sprintf("********************\n"))
}
createFormattedAd(vehicleData)
select(vehicleData,mpg,hp,qsec)
select(vehicleData,mpg,hp,qsec)
select(vehicleData,mpg,hp,qsec)
paste(select(vehicleData,mpg,hp,qsec))
createFormattedAd(vehicleData)
createFormattedAd <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
}
createFormattedAd(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisons(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisons(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-36s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisons(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-32s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisons(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("*********************************\n"),
sprintf("* %-33s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("*********************************\n"))
}
createFormattedAdWithComparisons(vehicleData)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("************************************\n"),
sprintf("* %-33s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("************************************\n"))
}
createFormattedAdWithComparisons(vehicleData)
randVehicles <- sample_n(vehiclesData,n)
n <- 3
randVehicles <- sample_n(vehiclesData,n)
randVehicles
randVehicles <- select(sample_n(vehiclesData,n),mpg,cyl,hp,qsec)
randVehicles
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
carname <- row.names(vehicleData)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
message(sprintf("********************\n* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n********************\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))))
message(sprintf("********************\n* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n********************\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
message(sprintf("********************\n* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("************************************\n* %-33s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("************************************\n"))
}
createFormattedAdWithComparisons(vehicleData)
sapply(randVehicles, displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randvehicle)
if (randVehicle[,1] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
sapply(randVehicles, displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randVehicle)
if (randVehicle[,1] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
sapply(randVehicles, displayAd)
sapply(randVehicles, displayAd)
apply(randVehicles, 1, displayAd)
randVehicles
randVehicles[1,]
randVehilce <- randVehicles[1,]
randVehilce
randVehilce[1,]
randVehilce[,1]
apply(randVehicles,MARGIN =  1, displayAd)
apply(randVehicles,MARGIN =  2, displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randVehicle)
if (randVehicle[1,1] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[1,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[1,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
apply(randVehicles,MARGIN =  2, displayAd)
apply(randVehicles,MARGIN =  2, displayAd(randVehicle))
apply(randVehicles,MARGIN =  2, displayAd(randvehicle))
apply(randVehicles,MARGIN =  2, displayAd)
apply(randVehicles,MARGIN =  2,FUN =  displayAd)
bspmatrix<-matrix(1:30,byrow=T,ncol=10) # neue Beispielmatrix
> multipliziere <- function(x) {10*x}     # neue Beispielfunktion
multipliziere <- function(x) {10*x}     # neue Beispielfunktion
bspmatrix
apply(bspmatrix,MARGIN = 2, FUN = multipliziere)
apply(bspmatrix,MARGIN = 1, FUN = multipliziere)
apply(bspmatrix,MARGIN = c(1,2), FUN = multipliziere)
apply(randVehicles,MARGIN = c(1,2),FUN =  displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randVehicle)
if (randVehicle[1,] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
apply(randVehicles,MARGIN = 1,FUN =  displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randVehicle)
if (randVehicle[,] >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
apply(randVehicles,MARGIN = 1,FUN =  displayAd)
displayAd <- function(randVehicle)
{
carname <- row.names(randVehicle)
if (randVehicle >= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicle[,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicle[,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicle)),evalTop),
sprintf("********************\n"))
}
apply(randVehicles,MARGIN = 1,FUN =  displayAd)
randVehicles
randVehicles[1,]
apply(bspmatrix,MARGIN = c(1,2), FUN = multipliziere)
apply(bspmatrix,MARGIN = 2, FUN = multipliziere)
sapply(bspmatrix, FUN = multipliziere)
lapply(bspmatrix, FUN = multipliziere)
mutate(vehiclesData,mlg = read.csv("carMileage.csv", header=T))
carMileage <- read.csv("carMileage.csv", header = T)
mutate(vehiclesData,mlg = carMileage)
mutate(vehiclesData,mlg = carMileage[,1])
mutate(vehiclesData,mlg = carMileage[,2])
carPrices <- read.csv("carPrices.csv", header = T)
mutate(vehiclesData,mlg = carMileage[,2], price = carPrices[,2])
vehiclesMlgPrice
vehiclesMlgPrice <- mutate(vehiclesData,mlg = carMileage[,2], price = carPrices[,2])
vehiclesMlgPrice
vehiclesMlgPrice <- mutate(vehiclesData,mlg = carMileage[,2], price = carPrices[,2],type = carMileage[,1])
vehiclesMlgPrice
row.names(vehiclesMlgPrice)
library(RCurl)
install.packages("RCurl")
library(RCurl)
library(RJSONIO)
response_parsed <- fromJSON(getURL(URL, ssl.verifyhost = 0L, ssl.verifypeer = 0L))
URL = "https://www.googleapis.com/books/v1/volumes?q=george+r+r+martin&maxResults=40"
response_parsed <- fromJSON(getURL(URL, ssl.verifyhost = 0L, ssl.verifypeer = 0L))
createFormattedAdWithComparisonsN <- function(vehiclesData,n)
{
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
randVehicles <- select(sample_n(vehiclesData,n),mpg,cyl,hp,qsec)
for (i in 1:n)
{
carname <- row.names(randVehicles[i,])
if (randVehicles[i,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicles[i,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicles[i,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicles[i,])),evalTop),
sprintf("********************\n"))
}
createFormattedAdWithComparisonsN <- function(vehiclesData,n)
{
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
randVehicles <- select(sample_n(vehiclesData,n),mpg,cyl,hp,qsec)
for (i in 1:n)
{
carname <- row.names(randVehicles[i,])
if (randVehicles[i,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicles[i,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicles[i,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicles[i,])),evalTop),
sprintf("********************\n"))
}
vehiclesData <- mtcars
library(dplyr)
createFormattedAdWithComparisonsN(vehiclesData,5)
createFormattedAdWithComparisonsN <- function(vehiclesData,n)
{
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
randVehicles <- select(sample_n(vehiclesData,n),mpg,cyl,hp,qsec)
for (i in 1:n)
{
carname <- row.names(randVehicles[i,])
if (randVehicles[i,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicles[i,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicles[i,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicles[i,])),evalTop),
sprintf("********************\n"))
}
}
createFormattedAdWithComparisonsN(vehiclesData,5)
createFormattedAdWithComparisonsN(vehiclesData,12)
# Initialisiere die Daten
vehicleData <- mtcars["Camaro Z28",]
vehiclesData <- mtcars
library(dplyr)
# TODO
# Aufgabe c: darstellen der zufÃ¤llig ausgewÃ¤hlten Autos mit displayAd und apply
# Aufgabe d: Anpassen der Funktion aus c auf die Daten aus c
# Funktion fÃ¼r Teilaufgabe a.) mit Test
# Unformatierte Ausgabe einer bestimmten Zeile
createAd <- function(vehicleData){return(vehicleData)}
createAd(vehicleData)
# Funktion zu Teilaufgabe b.) mit Test
# Formatierung einer der Daten zu einem Auto in die gewÃ¼nschte Form
createFormattedAd <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
message(sprintf("********************\n* %-17s*\n",carname),
sprintf("* %-5s = %-9s*\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec)))),
sprintf("********************\n"))
}
createFormattedAd(vehicleData)
# Funktion fÃ¼r Teilaufgabe c.) mit Test
# Vergleich der Wagen in Bezug auf die Kraftstoffeffizienz, der Leistung und der quarter
# mile time.
# Ist das Fahrzeug in den top 10% fÃ¼ge einen entsprechenden Vermerk hinzu.
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
createFormattedAdWithComparisons <- function(vehicleData)
{vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
carname <- row.names(vehicleData)
if (vehicleData[,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (vehicleData[,4]>= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (vehicleData[,7]<= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("************************************\n* %-33s*\n",carname),
sprintf("* %-16s = %-6s %6s *\n",vehicleDim,c(paste(select(vehicleData,mpg,cyl,hp,qsec))),evalTop),
sprintf("************************************\n"))
}
createFormattedAdWithComparisons(vehicleData)
# Funktion fÃ¼r Teilaufgabe d.) mit Test
createFormattedAdWithComparisonsN <- function(vehiclesData,n)
{
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesData["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesData["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesData["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:")
randVehicles <- select(sample_n(vehiclesData,n),mpg,cyl,hp,qsec)
for (i in 1:n)
{
carname <- row.names(randVehicles[i,])
if (randVehicles[i,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicles[i,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicles[i,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec)
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicles[i,])),evalTop),
sprintf("********************\n"))
}
}
createFormattedAdWithComparisonsN(vehiclesData,5)
createFormattedAdWithComparisonsN(vehiclesData,12)
createFormattedAdWithComparisonsN(vehiclesData,5)
createFormattedAdWithComparisonsN(vehiclesData,12)
# HinzufÃ¼gen des Preises und der Laufleistung
carMileage <- read.csv("carMileage.csv", header = T)
carPrices <- read.csv("carPrices.csv", header = T)
vehiclesMlgPrice <- mutate(vehiclesData,mlg = carMileage[,2], price = carPrices[,2],type = carMileage[,1])
vehiclesData <- mtcars
library(dplyr)
# TODO
# Aufgabe c: darstellen der zufÃ¤llig ausgewÃ¤hlten Autos mit displayAd und apply
# Aufgabe d: Anpassen der Funktion aus c auf die Daten aus c
# Funktion fÃ¼r Teilaufgabe a.) mit Test
# Unformatierte Ausgabe einer bestimmten Zeile
createAd <- function(vehicleData){return(vehicleData)}
createAd(vehicleData)
# Funktion zu Teilaufgabe b.) mit Test
# Formatierung einer der Daten zu einem Auto in die gewÃ¼nschte Form
createFormattedAd <- function(vehicleData)
load("C:/Users/Peter/Google Drive/SS16/A primer in data science/.Rhistory")
randVehicles <- select(sample_n(vehiclesMlgPrice,n),mpg,cyl,hp,qsec,mlg,price,type)
for (i in 1:n)
createFormattedAdWithComparisonsNMilePrice <- function(vehiclesData,n)
{
carMileage <- read.csv("carMileage.csv", header = T)
carPrices <- read.csv("carPrices.csv", header = T)
vehiclesMlgPrice <- mutate(vehiclesData,mlg = carMileage[,2], price = carPrices[,2],type = carMileage[,1])
# Die Top Ten Werte fÃ¼r Leistung, Fuel Efficiency, 1/4 mile time
topHp <- quantile(vehiclesMlgPrice["hp"],probs = 0.9,na.rm = T)
topMpg <- quantile(vehiclesMlgPrice["mpg"],probs = 0.9,na.rm = T)
topQsec <- quantile(vehiclesMlgPrice["qsec"],probs = 0.1,na.rm = T)
quantiles <- c(topHp,topMpg, topQsec)
vehicleDim <- c("Fuel Efficiency:","Cylinder:","Horse Power:","1/4 mile time:", "Mileage:", "Price")
randVehicles <- select(sample_n(vehiclesMlgPrice,n),mpg,cyl,hp,qsec,mlg,price,type)
for (i in 1:n)
{
if (randVehicles[i,1]>= quantiles[2]) tempMpg <- "Top10%" else tempMpg <- ""
if (randVehicles[i,3] >= quantiles[1]) tempHp <- "Top10%" else tempHp <- ""
if (randVehicles[i,4] <= quantiles[3]) tempQsec <- "Top10%" else tempQsec <- ""
evalTop <- c(tempMpg,"",tempHp,tempQsec,"","")
carname <- randVehicles[i,"type"]
message(sprintf("********************\n"),
sprintf("* %-17s*\n",carname),
sprintf("* %-16s = %-6s %s *\n",vehicleDim,c(paste(randVehicles[i,1:6])),evalTop),
sprintf("********************\n"))
}
}
createFormattedAdWithComparisonsN
